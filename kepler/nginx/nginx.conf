# /opt/local/nginx/conf/nginx.conf

#user  nobody;
worker_processes  1;
daemon off;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    gzip  on;

    # unicorn config from http://unicorn.bogomips.org/examples/nginx.conf
    upstream app_server {
      # fail_timeout=0 means we always retry an upstream even if it failed
      # to return a good HTTP response (in case the Unicorn master nukes a
      # single worker for timing out).

      # for UNIX domain socket setups:
      #    server unix:/tmp/.sock fail_timeout=0;

      # for TCP setups, point these to your backend servers
      server 127.0.0.1:8080 fail_timeout=0;
      # server 192.168.0.8:8080 fail_timeout=0;
      # server 192.168.0.9:8080 fail_timeout=0;
    }

    server {
        listen       80;
        # server_name  catalog.localhost;

        root /Users/ej/UCAR/catalog_ui/public;
        try_files $uri/index.html $uri.html $uri @app;

        location /catalog-maps {
          alias /Users/ej/Dropbox/UCAR/catalog-maps;
          autoindex on;
        }

        location /sandbox.geo {
          alias /Users/ej/Dropbox/projects/sandbox.geo;
          autoindex on;
        }

        location @app {

          # an HTTP header important enough to have its own Wikipedia entry:
          #   http://en.wikipedia.org/wiki/X-Forwarded-For
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # enable this if and only if you use HTTPS, this helps Rack
          # set the proper protocol for doing redirects:
          # proxy_set_header X-Forwarded-Proto https;

          # pass the Host: header from the client right along so redirects
          # can be set properly within the Rack application
          proxy_set_header Host $http_host;

          # we don't want nginx trying to do something clever with
          # redirects, we set the Host: header above already.
          proxy_redirect off;

          # Try to serve static files from nginx, no point in making an
          # *application* server like Unicorn/Rainbows! serve static files.

          if (!-f $request_filename) {
              proxy_pass http://app_server;
              break;
          }

        }

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }


}
